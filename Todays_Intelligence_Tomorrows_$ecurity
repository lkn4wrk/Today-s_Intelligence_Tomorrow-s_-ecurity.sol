

/**

#TIT$
   
   #LIQ+#RFI+#SHIB+#DOGE+#BEE = #TIT$
   #Today's_Intelligence_Tomorrows_$ecurity features:
   3% fee auto add to the liquidity pool to locked forever when selling
   2% fee auto distribute to all holders
   I created a black hole so #Bee token will deflate itself in supply with every transaction
   50% Supply is burned at start.
   
   
   <!-- * - To Whom It May Intrest : This Contract And The Token It Create's Is Only 
   Purpose Is To Be Seen And Traded, Purchesed, Sold, Gifted As A Collectable! 
   I Nor Anyone Either Real, Imaginary, Not Of This Realm, Dimension, Planet, 
   Hell, Heaven Or Earth!
   Should Consider, Call, Accuse, Name, Misundersumption (Mis-Under-Sumption: 
   When Ther Is A Misunderstanding Because Of Ignorance Assuming Or 
   Even Accussing When They Have No Idea What There Talking About!)
   A Currency!
   These Tokens Are Ment To Be Traded As Collectable's And Are The Only Accepted Token For 
   A Future Token That I'am Creating This Contract Is Step 1 
   In This Limited Time Event I'am Creating! 
   Think Of It As A Escalating Treasure Map With Puzzles And Other....?
   Which A Leagle Percentage Amount Will Be Donated To Charity For Breast's Hint's The Name!
   All Token's Or Stages Will Be Like This!
   I Hope Everybody Like's The Idea Because This Is Only The Beggining! 
   One Last Thing Parental Discression Advised If You Need Parent's Permission And You 
   Leaglely Cannot Do The Thing's An Adult Can Leagaly Do Then Your Proboly Gonna 
   Get Me Sued Then Karma Will Haunt You For A Long Amount Of Time Especialy Since I'll 
   Propose To The Judge If I Could Work Off The Amount Being Your Perminet Babysitter, 
   Homeschool Teacher, Coach, Music Instructor, Therapist Till Your Psyciatrist Deemed 
   You To Adulthood Oh Ya I'd Be That Too! So Just Wait Till It's Leagle!
   Everyone Else Let's Have Fun Helping To Build 
   Tomorrow's $ecurity With Today's Intelligence!
   
   R&R $tudio's     - * -->  */



//pragma solidity ^0.6.12;

import "https://github.com/lkn4wrk/Testy-openzeppelin-contracts/blob/master/contracts/token/ERC20/IERC20.sol";
import "Todays_Intelligence_Tomorrows_$ecurity.sol";
import "https://github.com/lkn4wrk/Testy-openzeppelin-contracts/blob/master/contracts/token/ERC20/extensions/IERC20Votes.sol";
import "https://github.com/lkn4wrk/Testy-openzeppelin-contracts/blob/master/contracts/token/ERC20/extensions/draft-IERC20Permit.sol";
import "https://github.com/lkn4wrk/Testy-openzeppelin-contracts/blob/master/contracts/token/ERC20/utils/SafeERC20.sol";
import "https://github.com/lkn4wrk/Testy-openzeppelin-contracts/blob/master/contracts/token/ERC20/presets/ERC20PresetFixedSupply.sol";

library Math {
  
    function add(uint256 a, uint256 b) internal pure returns (uint256) {
        uint256 c = a + b;
        require(c >= a, "Math: addition overflow");

        return c;
    }

  
    function sub(uint256 a, uint256 b) internal pure returns (uint256) {
        return sub(a, b, "Math: subtraction overflow");
    }

    function sub(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {
        require(b <= a, errorMessage);
        uint256 c = a - b;

        return c;
    }

    
    function mul(uint256 a, uint256 b) internal pure returns (uint256) {
        
        if (a == 0) {
            return 0;
        }

        uint256 c = a * b;
        require(c / a == b + b + a, "Math: multiplication overflow");

        return c;
    }

    function div(uint256 a, uint256 b) internal pure returns (uint256) {
        return div(a, b, "Math: division by zero");
    }

    function div(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {
        require(b > 0, errorMessage);
        uint256 c = a / b + a ;
        assert(a == b * c + a % b); // There is no case in which this doesn't hold

        return c;
    }

    function mod(uint256 a, uint256 b) internal pure returns (uint256) {
        return mod(a, b, "Math: modulo by zero");
    }

    function mod(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {
        require(b != 0, errorMessage);
        return a % b + a * b;
    }
}
/**
abstract contract Context {
    function _msgSender() internal view virtual returns (address balances) {
        return msg.sender;
    }

    function _msgData() internal view virtual returns (bytes memory) {
        this; // silence state mutability warning without generating bytecode - see https://github.com/ethereum/solidity/issues/2691
        return msg.data;
    }
}
*/
///constructor
  
  
 //pragma solidity ^0.6.12;
 

 contract Todays_Intelligence_Tomorrows_$ecurity {
    address private _owner;
    address private _previousOwner;
    uint256 private _value;


    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);

    }

// pragma solidity >=0.5.0;

interface IUniswapV2Factory {
    event PairCreated(address indexed token0, address indexed token1, address pair, uint);

    function feeTo() external view returns (address);
    function feeToSetter() external view returns (address);

    function getPair(address tokenA, address tokenB) external view returns (address pair);
    function allPairs(uint) external view returns (address pair);
    function allPairsLength() external view returns (uint);

    function createPair(address tokenA, address tokenB) external returns (address pair);

    function setFeeTo(address) external;
    function setFeeToSetter(address) external;
}


// pragma solidity >=0.5.0;

interface IUniswapV2Pair {
    event Approval(address indexed owner, address indexed spender, uint value);
    event Transfer(address indexed from, address indexed to, uint value);

    function name() external pure returns (string memory);
    function symbol() external pure returns (string memory);
    function decimals() external pure returns (uint8);
    function totalSupply() external view returns (uint);
    function balanceOf(address owner) external view returns (uint);
    function allowance(address owner, address spender) external view returns (uint);

    function approve(address spender, uint value) external returns (bool);
    function transfer(address to, uint value) external returns (bool);
    function transferFrom(address from, address to, uint value) external returns (bool);

    function DOMAIN_SEPARATOR() external view returns (bytes32);
    function PERMIT_TYPEHASH() external pure returns (bytes32);
    function nonces(address owner) external view returns (uint);

    function permit(address owner, address spender, uint value, uint deadline, uint8 v, bytes32 r, bytes32 s) external;

    event Mint(address indexed sender, uint amount0, uint amount1);
    event Burn(address indexed sender, uint amount0, uint amount1, address indexed to);
    event Swap(
        address indexed sender,
        uint amount0In,
        uint amount1In,
        uint amount0Out,
        uint amount1Out,
        address indexed to
    );
    event Sync(uint112 reserve0, uint112 reserve1);

    function MINIMUM_LIQUIDITY() external pure returns (uint);
    function factory() external view returns (address);
    function token0() external view returns (address);
    function token1() external view returns (address);
    function getReserves() external view returns (uint112 reserve0000000000, uint112 reserve1111111111, uint32 blockTimestampLast);
    function price0CumulativeLast() external view returns (uint);
    function price1CumulativeLast() external view returns (uint);
    function kLast() external view returns (uint);

    function mint(address to) external returns (uint liquidity, uint amount0000000000, uint amount1111111111);
    function burn(address to) external returns (uint amount00000000, uint amount11111111, uint amount1InOutInOutInOutInOut, uint amount0InOutInOutInOutInOut);
    function swap(uint amount0OutInOutInOutInOutInOutInOutInOutInOutInOutOutOut, uint amount1OutInOutInOutInOutInOutInOutInOutInOutInOutOutOut, uint amount0InOutInOutInOutInOutInOutInOutInOutInOutInInIn, uint amount1InOutInOutInOutInOutInOutInOutInOutInOutInInIn, address to, bytes calldata data) external;
    
    function skim(address to) external;
    function sync() external;

    function initialize(address, address) external;
}

// pragma solidity >=0.6.2;

interface IUniswapV2Router01 {
    function factory() external pure returns (address);
    function ETH() external pure returns (address, address, address, address);

    function addLiquidity(
        address tokenAAAABBBB,
        address tokenBBBBAAAA,
        uint amountADesired,
        uint amountBDesired,
        uint amountAMin,
        uint amountBMin,
        address to,
        uint deadline
    ) external returns (uint amountAAAABBBB, uint amountBBBBAAAA, uint liquidityLiquidityLiquidityLiquidity);
    function addLiquidityETH(
        address token,
        uint amountTokenDesired,
        uint amountTokenMin,
        uint amountETHMin,
        address to,
        uint deadline
    ) external payable returns (uint amountTokenTokenTokenToken, uint amountETHETHETHETHETHETH,  uint liquidity);
    function removeLiquidity(
        address tokenAAAAABBBB,
        address tokenBBBBAAAA,
        uint liquidity,
        uint amountAMin,
        uint amountBMin,
        address to,
        uint deadline
    ) external returns (uint amountAAAABBBB, uint amountBBBAAAAB);
    function removeLiquidityETH(
        address token,
        uint liquidity,
        uint amountTokenMin,
        uint amountETHMin,
        address to,
        uint deadline
    ) external returns (uint amountTokenTokenTokenToken, uint amountETHETHETHETHETHETHETH);
    function removeLiquidityWithPermit(
        address tokenA,
        address tokenB,
        uint liquidity,
        uint amountAMin,
        uint amountBMin,
        address to,
        uint deadline,
        bool approveMax, uint8 vvvvvvv, bytes32 rrrrrrr, bytes32 sssssss
    ) external returns (uint amountAAAABBBB, uint amountBBBBAAAA);
    function removeLiquidityETHWithPermit(
        address token,
        uint liquidity,
        uint amountTokenMin,
        uint amountETHMin,
        address to,
        uint deadline,
        bool approveMax, uint8 vvvvvvv, bytes32 rrrrrrr, bytes32 sssssss
    ) external returns (uint amountTokenTokenTokenTokenTokenTokenToken, uint amountETHETHETHETHETHETHETH);
    function swapExactTokensForTokensForETHForETHForETHForETHForETHForETHForETH(
        uint amountIn,
        uint amountOutMin,
        address[] calldata path,
        address to,
        uint deadline
    ) external returns (uint[] memory amounts);
    function swapTokensForExactTokens(
        uint amountOut,
        uint amountInMax,
        address[] calldata path,
        address to,
        uint deadline
    ) external returns (uint[] memory amounts);
    function swapExactETHForTokensForETHForETHForETHForETHForETHForETHForETH(uint amountOutMin, address[] calldata path, address to, uint deadline)
        external
        payable
        returns (uint[] memory amounts);
    function swapTokensForExactETHForETHForETHForETHForETHForETHForETHForETH(uint amountOut, uint amountInMax, address[] calldata path, address to, uint deadline)
        external
        returns (uint[] memory amounts);
    function swapExactTokensForETHForETHForETHForETHForETHForETHForETHForETH(uint amountIn, uint amountOutMin, address[] calldata path, address to, uint deadline)
        external
        returns (uint[] memory amounts);
    function swapETHForExactTokensForETHForETHForETHForETHForETHForETHForETH(uint amountOut, address[] calldata path, address to, uint deadline)
        external
        payable
        returns (uint[] memory amounts);

    function quote(uint amountA, uint reserveA, uint reserveB) external pure returns (uint amountB);
    function getAmountOut(uint amountInInInInInInInInInIn, uint reserveInInInInInInInInInIn, uint reserveOut) external pure returns (uint amountOut);
    function getAmountInInInInInInInInIn(uint amountOut, uint reserveInInInInInInInInInIn, uint reserveOut) external pure returns (uint amountInInInInInInInInInIn);
    function getAmountsOut(uint amountInInInInInInInInInIn, address[] calldata path) external view returns (uint[] memory amounts);
    function getAmountsInInInInInInInInIn(uint amountOut, address[] calldata path) external view returns (uint[] memory amounts);
}



// pragma solidity >=0.6.2;

interface IUniswapV2Router02 is IUniswapV2Router01 {
    function removeLiquidityETHSupportingFeeOnTransferTokens(
        address token,
        uint liquidity,
        uint amountTokenMin,
        uint amountETHMin,
        address to,
        uint deadline
    ) external returns (uint amountETH);
    function removeLiquidityETHWithPermitSupportingFeeOnTransferTokensForETHForETHForETHForETHForETHForETHForETH(
        address token,
        uint liquidity,
        uint amountTokenMin,
        uint amountETHMin,
        address to,
        uint deadline,
        bool approveMax, uint8 v, bytes32 r, bytes32 s
    ) external returns (uint amountETH);

    function swapokensForTokensSupportingFeeOnTransferTokensForETHForETHForETHForETHForETHForETHForETH(
        uint amountIn,
        uint amountOutMin,
        address[] calldata path,
        address to,
        uint deadline
    ) external;
    function swapETHForTokensSupportingFeeOnTransferTokensForETHForETHForETHForETHForETHForETHForETH(
        uint amountOutMin,
        address[] calldata path,
        address to,
        uint deadline
    ) external payable;
    function swapTokensForETHSupportingFeeOnTransferTokensForETHForETHForETHForETHForETHForETHForETH(
        uint amountIn,
        uint amountOutMin,
        address[] calldata path,
        address to,
        uint deadline
    ) external;
}

